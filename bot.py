import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery
import asyncio
import re
from datetime import datetime

from config import BOT_TOKEN, DEFAULT_SETTINGS, ALLOWED_USER_IDS
from api_client import AxiomClient
from storage import PositionStorage
from middleware import WhitelistMiddleware  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à middleware
from reports import ReportsManager  # –î–û–ë–ê–í–õ–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢
from notifications import notification_manager  # –î–û–ë–ê–í–õ–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage_fsm = MemoryStorage()
dp = Dispatcher(storage=storage_fsm)

# üîí –†–ï–ì–ò–°–¢–†–ò–†–£–ï–ú WHITELIST MIDDLEWARE (–í–ê–ñ–ù–û: —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ!)
whitelist_middleware = WhitelistMiddleware()
dp.message.middleware(whitelist_middleware)
dp.callback_query.middleware(whitelist_middleware)

logger.info(f"üîí Whitelist –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {ALLOWED_USER_IDS}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
axiom_client = AxiomClient()

# –î–û–ë–ê–í–õ–ï–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú –û–¢–ß–ï–¢–ù–û–°–¢–ò
reports_manager = ReportsManager()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class TradeStates(StatesGroup):
    awaiting_contract = State()

class SettingsStates(StatesGroup):
    setting_position_size = State()
    setting_sl = State()
    setting_tp = State()
    setting_breakeven = State()
    setting_slippage = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–∏–ø–ø–µ–¥–∂–∞

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_settings = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    keyboard = [
        [types.InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data='buy_token')],
        [types.InlineKeyboardButton(text="üìä –ú–æ–∏ —Å–¥–µ–ª–∫–∏", callback_data='my_trades')],
        [types.InlineKeyboardButton(text="üìà –û—Ç—á–µ—Ç—ã", callback_data='reports_menu')],  # –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
        [types.InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='notifications_menu')],  # –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
        [types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')],
        [types.InlineKeyboardButton(text="üíº –ë–∞–ª–∞–Ω—Å", callback_data='balance')]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)

def back_to_menu_keyboard():
    keyboard = [[types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)

def settings_keyboard():
    keyboard = [
        [types.InlineKeyboardButton(text="üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏", callback_data='set_position_size')],
        [types.InlineKeyboardButton(text="üõë –°—Ç–æ–ø-–ª–æ—Å—Å (%)", callback_data='set_sl')],
        [types.InlineKeyboardButton(text="üéØ –£—Ä–æ–≤–Ω–∏ TP", callback_data='set_tp')],
        [types.InlineKeyboardButton(text="‚öñÔ∏è –ë–µ–∑—É–±—ã—Ç–æ–∫ (%)", callback_data='set_breakeven')],
        [types.InlineKeyboardButton(text="üìä –°–ª–∏–ø–ø–µ–¥–∂ (%)", callback_data='set_slippage')],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)

def trades_keyboard(positions):
    keyboard = []
    for pos in positions:
        contract_short = f"{pos['contract_address'][:6]}...{pos['contract_address'][-4:]}"
        pnl = pos.get('pnl', 0)
        pnl_icon = "üü¢" if pnl >= 0 else "üî¥"
        
        keyboard.append([
            types.InlineKeyboardButton(
                text=f"{pnl_icon} {contract_short} ({pnl:+.1f}%)", 
                callback_data=f'position_details_{pos["contract_address"]}'
            )
        ])
        keyboard.append([
            types.InlineKeyboardButton(
                text=f"üö® Panic Sell {contract_short}", 
                callback_data=f'panic_sell_{pos["contract_address"]}'
            )
        ])
    
    keyboard.append([types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='my_trades')])
    keyboard.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')])
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)

def position_details_keyboard(contract_address):
    keyboard = [
        [types.InlineKeyboardButton(
            text="üö® Panic Sell", 
            callback_data=f'panic_sell_{contract_address}'
        )],
        [types.InlineKeyboardButton(
            text="üìà –ü—Ä–æ–¥–∞—Ç—å 25%", 
            callback_data=f'partial_sell_25_{contract_address}'
        )],
        [types.InlineKeyboardButton(
            text="üìà –ü—Ä–æ–¥–∞—Ç—å 50%", 
            callback_data=f'partial_sell_50_{contract_address}'
        )],
        [types.InlineKeyboardButton(text="üîô –ö —Å–¥–µ–ª–∫–∞–º", callback_data='my_trades')]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ù–û–í–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´
def reports_keyboard():
    keyboard = [
        [types.InlineKeyboardButton(text="üìä –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data='report_7')],
        [types.InlineKeyboardButton(text="üìà –ó–∞ –º–µ—Å—è—Ü", callback_data='report_30')],
        [types.InlineKeyboardButton(text="üìã –í—Å–µ –≤—Ä–µ–º—è", callback_data='report_all')],
        [types.InlineKeyboardButton(text="üìÑ –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫", callback_data='trade_history')],
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)

def notifications_keyboard():
    keyboard = [
        [types.InlineKeyboardButton(text="üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data='configure_notifications')],
        [types.InlineKeyboardButton(text="üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='show_notification_settings')],
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)

def notification_settings_keyboard():
    keyboard = [
        [types.InlineKeyboardButton(text="üü¢ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π", callback_data='toggle_position_open')],
        [types.InlineKeyboardButton(text="üî¥ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π", callback_data='toggle_position_close')],
        [types.InlineKeyboardButton(text="üõë Stop Loss", callback_data='toggle_stop_loss')],
        [types.InlineKeyboardButton(text="üéØ Take Profit", callback_data='toggle_take_profit')],
        [types.InlineKeyboardButton(text="‚öñÔ∏è Breakeven", callback_data='toggle_breakeven')],
        [types.InlineKeyboardButton(text="üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞", callback_data='toggle_daily_summary')],
        [types.InlineKeyboardButton(text="‚ö†Ô∏è –û—à–∏–±–∫–∏", callback_data='toggle_errors')],
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='notifications_menu')]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TP
def format_tp_levels(tp_levels):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ TP –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not tp_levels:
        return "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (—Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª) –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–æ–≤—ã–π
    if tp_levels and isinstance(tp_levels[0], (int, float)):
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ –Ω–æ–≤—ã–π —Å 25% –æ–±—ä—ë–º–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        tp_levels = [{'level': level, 'volume_percent': 25} for level in tp_levels]
    
    formatted = []
    for tp in tp_levels:
        level = tp.get('level', 0)
        volume = tp.get('volume_percent', 0)
        formatted.append(f"{level}x ({volume}%)")
    
    return ", ".join(formatted)

def parse_tp_input(text):
    """
    –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è TP —Å —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å—é –∫ –ø—Ä–æ–±–µ–ª–∞–º
    –§–æ—Ä–º–∞—Ç: "1.5:25,2:30,3:45" 
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã: "1.5 : 25 , 2 : 30 , 3 : 45"
    """
    tp_levels = []
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–≤–æ–¥ - —É–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
    # –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –¥–≤–æ–µ—Ç–æ—á–∏–π –∏ –∑–∞–ø—è—Ç—ã—Ö
    normalized_text = text.strip()
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –∑–∞–ø—è—Ç—ã—Ö
    normalized_text = ','.join(part.strip() for part in normalized_text.split(','))
    
    # –¢–µ–ø–µ—Ä—å —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –¥–≤–æ–µ—Ç–æ—á–∏–π –≤ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
    pairs = []
    for pair in normalized_text.split(','):
        if ':' in pair:
            level_part, volume_part = pair.split(':', 1)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º split –æ–¥–Ω–∏–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º
            normalized_pair = f"{level_part.strip()}:{volume_part.strip()}"
            pairs.append(normalized_pair)
        else:
            pairs.append(pair.strip())
    
    for pair in pairs:
        if not pair:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            continue
            
        try:
            if ':' in pair:
                level_str, volume_str = pair.split(':', 1)
                level_str = level_str.strip()
                volume_str = volume_str.strip()
                
                if not level_str or not volume_str:
                    raise ValueError(f"–ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏–ª–∏ –æ–±—ä—ë–º–∞")
                
                level = float(level_str)
                volume = float(volume_str)
                
                if level <= 1:
                    raise ValueError(f"–£—Ä–æ–≤–µ–Ω—å {level} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 1 (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.5 = +50% –ø—Ä–∏–±—ã–ª–∏)")
                if volume <= 0 or volume > 100:
                    raise ValueError(f"–û–±—ä—ë–º {volume}% –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100")
                
                tp_levels.append({
                    'level': level,
                    'volume_percent': volume
                })
            else:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ':' –º–µ–∂–¥—É —É—Ä–æ–≤–Ω–µ–º –∏ –æ–±—ä—ë–º–æ–º")
                
        except ValueError as e:
            # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
            raise ValueError(
                f"–û—à–∏–±–∫–∞ –≤ '{pair}': {str(e)}\n\n"
                f"üí° –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:\n"
                f"‚Ä¢ 1.5:25 (–ø—Ä–∏ +50% –ø—Ä–∏–±—ã–ª–∏ –ø—Ä–æ–¥–∞—Ç—å 25%)\n"
                f"‚Ä¢ 2:30,3:20 (–ø—Ä–∏ +100% –ø—Ä–æ–¥–∞—Ç—å 30%, –ø—Ä–∏ +200% –ø—Ä–æ–¥–∞—Ç—å 20%)\n"
                f"‚Ä¢ 1.5 : 25 , 2 : 30 (–ø—Ä–æ–±–µ–ª—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã)"
            )
    
    if not tp_levels:
        raise ValueError(
            "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ TP —É—Ä–æ–≤–Ω—è\n\n"
            "üí° –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
            "‚Ä¢ 1.5:25\n"
            "‚Ä¢ 2:30,3:20\n"
            "‚Ä¢ 1.5 : 25 , 2 : 30"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –æ–±—ä—ë–º
    total_volume = sum(tp['volume_percent'] for tp in tp_levels)
    if total_volume > 100:
        levels_info = ', '.join([f"{tp['level']}x:{tp['volume_percent']}%" for tp in tp_levels])
        raise ValueError(
            f"–û–±—â–∏–π –æ–±—ä—ë–º TP ({total_volume}%) –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100%\n\n"
            f"üìä –í–∞—à–∏ —É—Ä–æ–≤–Ω–∏: {levels_info}\n"
            f"üí° –£–º–µ–Ω—å—à–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã —Ç–∞–∫, —á—Ç–æ–±—ã —Å—É–º–º–∞ –±—ã–ª–∞ ‚â§ 100%"
        )
    
    return tp_levels

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_name = message.from_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    welcome_text = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!
–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç Axiom Trade –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.

üîí –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞
üë§ –í–∞—à ID: {message.from_user.id}

–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ üí∞ –ü–æ–∫—É–ø–∞—Ç—å –º–µ–º–∫–æ–∏–Ω—ã –Ω–∞ SOL
‚Ä¢ üéØ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ TP/SL —É—Ä–æ–≤–Ω–∏
‚Ä¢ ‚öñÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –±–µ–∑—É–±—ã—Ç–æ–∫
‚Ä¢ üìä –£–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
‚Ä¢ üìà –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
‚Ä¢ üîî –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–∞—Ö

üî• –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ Stop Loss: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–¥–∞–∂–∞ –ø—Ä–∏ —É–±—ã—Ç–∫–µ
‚Ä¢ Take Profit: –≥–∏–±–∫–∞—è —á–∞—Å—Ç–∏—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ –ø—Ä–∏ –ø—Ä–∏–±—ã–ª–∏
‚Ä¢ Breakeven: –ø–µ—Ä–µ–Ω–æ—Å SL –≤ –±–µ–∑—É–±—ã—Ç–æ–∫

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
"""
    await message.answer(welcome_text, reply_markup=main_keyboard())

@dp.message(Command("cancel"))
async def cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=back_to_menu_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu_handler(callback_query: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.answer()
    
    user_name = callback_query.from_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    welcome_text = f"""
ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ Axiom Trade

–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã

–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ üí∞ –ü–æ–∫—É–ø–∞—Ç—å –º–µ–º–∫–æ–∏–Ω—ã –Ω–∞ SOL
‚Ä¢ üéØ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ TP/SL —É—Ä–æ–≤–Ω–∏
‚Ä¢ ‚öñÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –±–µ–∑—É–±—ã—Ç–æ–∫
‚Ä¢ üìä –£–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
‚Ä¢ üìà –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
‚Ä¢ üîî –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–∞—Ö

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
"""
    await callback_query.message.edit_text(welcome_text, reply_markup=main_keyboard())

# –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –û–¢–ß–ï–¢–û–í

@dp.callback_query(F.data == "reports_menu")
async def reports_menu_handler(callback_query: CallbackQuery):
    await callback_query.answer()
    await callback_query.message.edit_text(
        "üìà <b>–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö —Ç–æ—Ä–≥–æ–≤:\n\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç:\n"
        "‚Ä¢ –û–±—â–∏–π P&L –∏ –≤–∏–Ω—Ä–µ–π—Ç\n"
        "‚Ä¢ –õ—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ —Å–¥–µ–ª–∫–∏\n"
        "‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è\n"
        "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –∏ –ø–æ–∑–∏—Ü–∏–π",
        reply_markup=reports_keyboard(),
        parse_mode='HTML'
    )

@dp.callback_query(F.data.startswith("report_"))
async def show_report_handler(callback_query: CallbackQuery):
    await callback_query.answer()
    
    period_map = {
        'report_7': 7,
        'report_30': 30,
        'report_all': None
    }
    
    days = period_map.get(callback_query.data)
    user_id = callback_query.from_user.id
    
    report_text = reports_manager.format_trade_summary(user_id, days)
    
    await callback_query.message.edit_text(
        f"<pre>{report_text}</pre>",
        reply_markup=reports_keyboard(),
        parse_mode='HTML'
    )

@dp.callback_query(F.data == "trade_history")
async def trade_history_handler(callback_query: CallbackQuery):
    await callback_query.answer()
    
    try:
        user_id = callback_query.from_user.id
        recent_trades = reports_manager.get_user_trades(user_id, 7)[:15]
        
        if not recent_trades:
            text = "üìã <b>–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫</b>\n\nüî≠ –°–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        else:
            text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (7 –¥–Ω–µ–π)</b>\n\n"
            
            for trade in recent_trades:
                action_icons = {
                    'open': 'üü¢',
                    'close': 'üî¥',
                    'sl': 'üõë',
                    'tp': 'üéØ'
                }
                
                icon = action_icons.get(trade['action'], '‚ö™')
                contract = trade['contract_address']
                date = datetime.fromtimestamp(trade['timestamp']).strftime('%d.%m %H:%M')
                
                pnl_text = ""
                if trade['action'] in ['close', 'sl', 'tp']:
                    pnl_text = f" ({trade['pnl_percent']:+.1f}%)"
                
                text += f"{icon} {contract[:6]}... - {date}{pnl_text}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
        timestamp = datetime.now().strftime('%H:%M:%S')
        text += f"\n<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {timestamp}</i>"
        
        await callback_query.message.edit_text(
            text,
            reply_markup=reports_keyboard(),
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ trade_history_handler: {e}")
        await callback_query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫.",
            reply_markup=reports_keyboard()
        )

# –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô

@dp.callback_query(F.data == "notifications_menu")
async def notifications_menu_handler(callback_query: CallbackQuery):
    await callback_query.answer()
    
    settings_text = notification_manager.format_notification_settings(callback_query.from_user.id)
    
    text = f"""
üîî <b>–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>

–ü–æ–ª—É—á–∞–π—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:
‚Ä¢ –û—Ç–∫—Ä—ã—Ç–∏–∏ –∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–π
‚Ä¢ –°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ Stop Loss –∏ Take Profit
‚Ä¢ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –≤ –±–µ–∑—É–±—ã—Ç–æ–∫
‚Ä¢ –û—à–∏–±–∫–∞—Ö —Å–∏—Å—Ç–µ–º—ã

{settings_text}
"""
    
    await callback_query.message.edit_text(
        text,
        reply_markup=notifications_keyboard(),
        parse_mode='HTML'
    )

@dp.callback_query(F.data == "configure_notifications")
async def configure_notifications_handler(callback_query: CallbackQuery):
    await callback_query.answer()
    
    await callback_query.message.edit_text(
        "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
        "‚úÖ = –≤–∫–ª—é—á–µ–Ω–æ, ‚ùå = –≤—ã–∫–ª—é—á–µ–Ω–æ",
        reply_markup=notification_settings_keyboard(),
        parse_mode='HTML'
    )

@dp.callback_query(F.data == "show_notification_settings")
async def show_notification_settings_handler(callback_query: CallbackQuery):
    await callback_query.answer()
    
    settings_text = notification_manager.format_notification_settings(callback_query.from_user.id)
    
    await callback_query.message.edit_text(
        settings_text,
        reply_markup=notifications_keyboard(),
        parse_mode='HTML'
    )

@dp.callback_query(F.data.startswith("toggle_"))
async def toggle_notification_handler(callback_query: CallbackQuery):
    await callback_query.answer()
    
    user_id = callback_query.from_user.id
    setting_key = callback_query.data.replace('toggle_', '')
    
    current_settings = notification_manager.get_user_settings(user_id)
    current_settings[setting_key] = not current_settings.get(setting_key, True)
    notification_manager.set_user_notifications(user_id, current_settings)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await configure_notifications_handler(callback_query)

# –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

@dp.callback_query(F.data == "balance")
async def show_balance(callback_query: CallbackQuery):
    await callback_query.answer()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        if not axiom_client.is_authenticated():
            await callback_query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å Axiom Trade API.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
                reply_markup=back_to_menu_keyboard()
            )
            return
        
        account_info = axiom_client.get_account_info()
        balance = account_info.get('balance', 0)
        
        text = f"""
üíº –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ:

üí∞ SOL: {balance:.6f}
üåê –ö–æ—à–µ–ª–µ–∫: {axiom_client.wallet_address[:8]}...{axiom_client.wallet_address[-6:]}

‚ÑπÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ API: ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω
"""
        
        await callback_query.message.edit_text(
            text,
            reply_markup=back_to_menu_keyboard()
        )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {str(e)}",
            reply_markup=back_to_menu_keyboard()
        )

@dp.callback_query(F.data == "buy_token")
async def buy_token(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.set_state(TradeStates.awaiting_contract)
    await callback_query.message.edit_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ SOL —Ç–æ–∫–µ–Ω–∞:\n\n"
        "–ü—Ä–∏–º–µ—Ä: So11111111111111111111111111111111111111112\n\n"
        "‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–¥—Ä–µ—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!",
        reply_markup=back_to_menu_keyboard()
    )

@dp.callback_query(F.data == "my_trades")
async def show_my_trades(callback_query: CallbackQuery):
    await callback_query.answer()
    
    try:
        positions = axiom_client.get_user_positions(callback_query.from_user.id)
        
        if not positions:
            await callback_query.message.edit_text(
                "üî≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π.\n\n"
                "–û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–∑–∏—Ü–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω'",
                reply_markup=back_to_menu_keyboard()
            )
            return
            
        text = "üìä –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:\n\n"
        
        total_invested = 0
        total_current_value = 0
        
        for position in positions:
            contract_address = position.get('contract_address', 'N/A')
            invested = position.get('invested_sol', 0)
            token_amount = position.get('token_amount', 0)
            entry_price = position.get('entry_price', 0)
            current_price = position.get('current_price', entry_price)
            pnl = position.get('pnl', 0)
            sl = position.get('sl', 0)
            breakeven_moved = position.get('breakeven_moved', False)
            tp_executed = position.get('tp_executed', [])
            tp_levels = position.get('tp_levels', [])
            
            current_value = token_amount * current_price if current_price > 0 else invested
            total_invested += invested
            total_current_value += current_value
            
            status_icon = "üü¢" if pnl >= 0 else "üî¥"
            breakeven_status = " üîí" if breakeven_moved else ""
            tp_status = f" TP:{len(tp_executed)}/{len(tp_levels)}" if tp_levels else ""
            
            text += f"{status_icon} {contract_address[:8]}...{contract_address[-6:]}\n"
            text += f"   üí∞ –í–ª–æ–∂–µ–Ω–æ: {invested:.4f} SOL\n"
            text += f"   üìà –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {current_value:.4f} SOL\n"
            text += f"   üìä PnL: {pnl:+.2f}%{breakeven_status}{tp_status}\n"
            text += f"   üõë SL: {sl}%\n\n"
        
        total_pnl = ((total_current_value - total_invested) / total_invested * 100) if total_invested > 0 else 0
        total_icon = "üü¢" if total_pnl >= 0 else "üî¥"
        
        text += f"üíº –û–±—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å:\n"
        text += f"   –í–ª–æ–∂–µ–Ω–æ: {total_invested:.4f} SOL\n"
        text += f"   –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_current_value:.4f} SOL\n"
        text += f"   {total_icon} –û–±—â–∏–π PnL: {total_pnl:+.2f}%"
        
        await callback_query.message.edit_text(
            text,
            reply_markup=trades_keyboard(positions)
        )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {e}")
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {str(e)}",
            reply_markup=back_to_menu_keyboard()
        )

@dp.callback_query(F.data == "settings")
async def show_settings(callback_query: CallbackQuery):
    await callback_query.answer()
    
    user_id = callback_query.from_user.id
    settings = user_settings.get(user_id, DEFAULT_SETTINGS)
    
    text = f"""
‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:

üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {settings['position_size']}% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
üõë –°—Ç–æ–ø-–ª–æ—Å—Å: {settings['sl']}%
üéØ –£—Ä–æ–≤–Ω–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: {format_tp_levels(settings['tp_levels'])}
‚öñÔ∏è –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –±–µ–∑—É–±—ã—Ç–æ–∫: {settings['breakeven_percent']}%
üìä –°–ª–∏–ø–ø–µ–¥–∂: {settings['slippage_percent']}%

‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç 24/7:
‚Ä¢ SL: –ø—Ä–æ–¥–∞–∂–∞ –≤—Å–µ–π –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ —É–±—ã—Ç–∫–µ {settings['sl']}%
‚Ä¢ TP: –ø—Ä–æ–¥–∞–∂–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ–±—ä—ë–º–∞ –Ω–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ –ø—Ä–∏–±—ã–ª–∏
‚Ä¢ Breakeven: –ø–µ—Ä–µ–Ω–æ—Å SL –≤ 0% –ø—Ä–∏ –ø—Ä–∏–±—ã–ª–∏ {settings['breakeven_percent']}%
‚Ä¢ Slippage: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã {settings['slippage_percent']}%

–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:
"""
    await callback_query.message.edit_text(text, reply_markup=settings_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.callback_query(F.data == "set_position_size")
async def set_position_size(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.set_state(SettingsStates.setting_position_size)
    await callback_query.message.edit_text(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–≤ % –æ—Ç –±–∞–ª–∞–Ω—Å–∞):\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã: 10, 25, 50\n"
        "‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 20% –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        reply_markup=back_to_menu_keyboard()
    )

@dp.callback_query(F.data == "set_sl")
async def set_sl(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.set_state(SettingsStates.setting_sl)
    await callback_query.message.edit_text(
        "üõë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å (–≤ %):\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã: 10, 15, 20\n"
        "‚ö†Ô∏è –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ —É–±—ã—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏—è –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–∞–Ω–∞",
        reply_markup=back_to_menu_keyboard()
    )

@dp.callback_query(F.data == "set_tp")
async def set_tp(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.set_state(SettingsStates.setting_tp)
    await callback_query.message.edit_text(
        "üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤:\n\n"
        "–§–æ—Ä–º–∞—Ç: —É—Ä–æ–≤–µ–Ω—å:–æ–±—ä—ë–º,—É—Ä–æ–≤–µ–Ω—å:–æ–±—ä—ë–º...\n"
        "–ü—Ä–∏–º–µ—Ä: 1.5:25,2:30,3:20,6:25\n\n"
        "–ì–¥–µ:\n"
        "‚Ä¢ 1.5 = +50% –ø—Ä–∏–±—ã–ª–∏, –ø—Ä–æ–¥–∞—Ç—å 25% –ø–æ–∑–∏—Ü–∏–∏\n"
        "‚Ä¢ 2 = +100% –ø—Ä–∏–±—ã–ª–∏, –ø—Ä–æ–¥–∞—Ç—å 30% –ø–æ–∑–∏—Ü–∏–∏\n"
        "‚Ä¢ 3 = +200% –ø—Ä–∏–±—ã–ª–∏, –ø—Ä–æ–¥–∞—Ç—å 20% –ø–æ–∑–∏—Ü–∏–∏\n"
        "‚Ä¢ 6 = +500% –ø—Ä–∏–±—ã–ª–∏, –ø—Ä–æ–¥–∞—Ç—å 25% –ø–æ–∑–∏—Ü–∏–∏\n\n"
        "‚ö†Ô∏è –û–±—â–∏–π –æ–±—ä—ë–º –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100%\n"
        "üí° –ü—Ä–æ–±–µ–ª—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã: 1.5 : 25 , 2 : 30",
        reply_markup=back_to_menu_keyboard()
    )

@dp.callback_query(F.data == "set_breakeven")
async def set_breakeven(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.set_state(SettingsStates.setting_breakeven)
    await callback_query.message.edit_text(
        "‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ –±–µ–∑—É–±—ã—Ç–æ–∫:\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã: 10, 15, 20\n"
        "‚ÑπÔ∏è –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —ç—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—Å—è –≤ —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ (0%)",
        reply_markup=back_to_menu_keyboard()
    )

@dp.callback_query(F.data == "set_slippage")
async def set_slippage(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.set_state(SettingsStates.setting_slippage)
    
    current_settings = user_settings.get(callback_query.from_user.id, DEFAULT_SETTINGS)
    current_slippage = current_settings['slippage_percent']
    
    await callback_query.message.edit_text(
        f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª–∏–ø–ø–µ–¥–∂–∞\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_slippage}%\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–∏–ø–ø–µ–¥–∂–∞ (–≤ %):\n\n"
        f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
        f"‚Ä¢ 0.1-1% - —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã\n"
        f"‚Ä¢ 1-5% - –æ–±—ã—á–Ω—ã–µ –º–µ–º–∫–æ–∏–Ω—ã\n"
        f"‚Ä¢ 5-15% - –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ –º–µ–º–∫–æ–∏–Ω—ã\n"
        f"‚Ä¢ 15-50% - —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ\n\n"
        f"‚ö†Ô∏è –ù–∏–∑–∫–∏–π —Å–ª–∏–ø–ø–µ–¥–∂ = —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å\n"
        f"‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —Å–ª–∏–ø–ø–µ–¥–∂ = –±–æ–ª—å—à–µ –ø–æ—Ç–µ—Ä—å –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ/–ø—Ä–æ–¥–∞–∂–µ",
        reply_markup=back_to_menu_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª–µ–π –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query(F.data.startswith("position_details_"))
async def show_position_details(callback_query: CallbackQuery):
    await callback_query.answer()
    
    contract_address = callback_query.data.replace('position_details_', '')
    
    try:
        positions = axiom_client.get_user_positions(callback_query.from_user.id)
        position = next((p for p in positions if p['contract_address'] == contract_address), None)
        
        if not position:
            await callback_query.message.edit_text(
                "‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=back_to_menu_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        current_price = axiom_client.get_token_price(contract_address)
        if current_price > 0:
            entry_price = position.get('entry_price', 0)
            pnl = ((current_price - entry_price) / entry_price * 100) if entry_price > 0 else 0
        else:
            pnl = position.get('pnl', 0)
        
        invested = position.get('invested_sol', 0)
        token_amount = position.get('token_amount', 0)
        entry_price = position.get('entry_price', 0)
        sl = position.get('sl', 0)
        tp_levels = position.get('tp_levels', [])
        breakeven_percent = position.get('breakeven_percent', 0)
        breakeven_moved = position.get('breakeven_moved', False)
        tp_executed = position.get('tp_executed', [])
        tx_hash = position.get('transaction_hash', 'N/A')
        slippage = position.get('slippage_percent', DEFAULT_SETTINGS['slippage_percent'])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–∏–ø–ø–µ–¥–∂
        
        current_value = token_amount * current_price if current_price > 0 else invested
        status_icon = "üü¢" if pnl >= 0 else "üî¥"
        
        text = f"""
üìä –î–µ—Ç–∞–ª–∏ –ø–æ–∑–∏—Ü–∏–∏:

üîÑ –ö–æ–Ω—Ç—Ä–∞–∫—Ç: {contract_address[:8]}...{contract_address[-6:]}
{status_icon} PnL: {pnl:+.2f}%

üí∞ –§–∏–Ω–∞–Ω—Å—ã:
   –í–ª–æ–∂–µ–Ω–æ: {invested:.6f} SOL
   –¢–æ–∫–µ–Ω–æ–≤: {token_amount:.2f}
   –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {current_value:.6f} SOL

üìà –¶–µ–Ω—ã:
   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price:.8f} SOL
   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.8f} SOL

üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
   üõë Stop Loss: {sl}%
   üéØ Take Profit: {format_tp_levels(tp_levels)}
   ‚öñÔ∏è Breakeven: {breakeven_percent}%
   üìä Slippage: {slippage}%

üìä –°—Ç–∞—Ç—É—Å:
   –ë–µ–∑—É–±—ã—Ç–æ–∫: {'‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' if breakeven_moved else '‚ùå –ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}
   TP –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(tp_executed)}/{len(tp_levels)}

üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {tx_hash[:8]}...
"""
        
        await callback_query.message.edit_text(
            text,
            reply_markup=position_details_keyboard(contract_address)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–∑–∏—Ü–∏–∏: {e}")
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–∑–∏—Ü–∏–∏: {str(e)}",
            reply_markup=back_to_menu_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–∞—Å—Ç–∏—á–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏
@dp.callback_query(F.data.startswith("partial_sell_"))
async def partial_sell(callback_query: CallbackQuery):
    await callback_query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    data_parts = callback_query.data.split('_')
    percentage = float(data_parts[2])
    contract_address = '_'.join(data_parts[3:])
    
    try:
        processing_msg = await callback_query.message.edit_text("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —á–∞—Å—Ç–∏—á–Ω—É—é –ø—Ä–æ–¥–∞–∂—É...")
        
        result = axiom_client.close_position(callback_query.from_user.id, contract_address, percentage)
        
        if result.get('success') or result.get('signature'):
            await processing_msg.edit_text(
                f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ {percentage}% –ø–æ–∑–∏—Ü–∏–∏!\n"
                f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç: {contract_address[:8]}...{contract_address[-6:]}\n"
                f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {result.get('signature', 'N/A')[:8]}...",
                reply_markup=back_to_menu_keyboard()
            )
        else:
            await processing_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏: {result.get('error', 'Unknown error')}",
                reply_markup=back_to_menu_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏: {e}")
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏: {str(e)}",
            reply_markup=back_to_menu_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ panic sell
@dp.callback_query(F.data.startswith("panic_sell_"))
async def panic_sell(callback_query: CallbackQuery):
    await callback_query.answer()
    
    contract_address = callback_query.data.replace('panic_sell_', '')
    
    try:
        processing_msg = await callback_query.message.edit_text("üö® –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –ø—Ä–æ–¥–∞–∂—É...")
        
        result = axiom_client.close_position(callback_query.from_user.id, contract_address, 100.0)
        
        if result.get('success') or result.get('signature'):
            await processing_msg.edit_text(
                f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç–∞!\n"
                f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç: {contract_address[:8]}...{contract_address[-6:]}\n"
                f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {result.get('signature', 'N/A')[:8]}...",
                reply_markup=back_to_menu_keyboard()
            )
        else:
            await processing_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {result.get('error', 'Unknown error')}",
                reply_markup=back_to_menu_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {str(e)}",
            reply_markup=back_to_menu_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
@dp.message(TradeStates.awaiting_contract)
async def handle_contract_address(message: types.Message, state: FSMContext):
    contract_address = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è SOL –∞–¥—Ä–µ—Å–∞ (base58, –¥–ª–∏–Ω–∞ 32-44 —Å–∏–º–≤–æ–ª–∞)
    if len(contract_address) < 32 or len(contract_address) > 44:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ SOL.\n"
            "–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 32 –¥–æ 44 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=back_to_menu_keyboard()
        )
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    settings = user_settings.get(user_id, DEFAULT_SETTINGS)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        if not axiom_client.is_authenticated():
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å Axiom Trade API.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
                reply_markup=back_to_menu_keyboard()
            )
            await state.clear()
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
        account_info = axiom_client.get_account_info()
        balance = account_info.get('balance', 0)
        
        if balance <= 0:
            await message.answer(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.",
                reply_markup=back_to_menu_keyboard()
            )
            await state.clear()
            return
            
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        amount = (balance * settings['position_size'] / 100)
        
        if amount < 0.001:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            await message.answer(
                "‚ùå –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª (–º–∏–Ω–∏–º—É–º 0.001 SOL).\n"
                "–£–≤–µ–ª–∏—á—å—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.",
                reply_markup=back_to_menu_keyboard()
            )
            await state.clear()
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∫—É–ø–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ª–∏–ø–ø–µ–¥–∂–µ
        tp_summary = format_tp_levels(settings['tp_levels'])
        processing_msg = await message.answer(
            f"üîÑ –û—Ç–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏—é...\n\n"
            f"üí∞ –†–∞–∑–º–µ—Ä: {amount:.4f} SOL\n"
            f"üõë Stop Loss: {settings['sl']}%\n"
            f"üéØ Take Profit: {tp_summary}\n"
            f"‚öñÔ∏è Breakeven: {settings['breakeven_percent']}%\n"
            f"üìä –°–ª–∏–ø–ø–µ–¥–∂: {settings['slippage_percent']}%"
        )
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–ª–∏–ø–ø–µ–¥–∂–∞
        position = axiom_client.open_position(
            user_id=user_id,
            contract_address=contract_address,
            amount=amount,
            sl=settings['sl'],
            tp=settings['tp_levels'],
            breakeven=settings['breakeven_percent'],
            slippage=settings['slippage_percent']  # –ü–µ—Ä–µ–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–ª–∏–ø–ø–µ–¥–∂
        )
        
        await processing_msg.edit_text(
            f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞!\n\n"
            f"üîÑ –ö–æ–Ω—Ç—Ä–∞–∫—Ç: {contract_address[:8]}...{contract_address[-6:]}\n"
            f"üí∞ –†–∞–∑–º–µ—Ä: {amount:.4f} SOL\n"
            f"üí∏ –¢–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {position.get('token_amount', 0):.2f}\n"
            f"üìà –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {position.get('entry_price', 0):.8f} SOL\n"
            f"üõë SL: {settings['sl']}%\n"
            f"üéØ TP: {tp_summary}\n"
            f"‚öñÔ∏è –ë–µ–∑—É–±—ã—Ç–æ–∫: {settings['breakeven_percent']}%\n"
            f"üìä –°–ª–∏–ø–ø–µ–¥–∂: {settings['slippage_percent']}%\n"
            f"üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {position.get('transaction_hash', 'N/A')[:8]}...\n\n"
            f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!",
            reply_markup=back_to_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏:\n{str(e)}",
            reply_markup=back_to_menu_keyboard()
        )
    
    await state.clear()

@dp.message(SettingsStates.setting_position_size)
async def handle_position_size(message: types.Message, state: FSMContext):
    try:
        size = float(message.text)
        if 0 < size <= 100:
            user_id = message.from_user.id
            if user_id not in user_settings:
                user_settings[user_id] = DEFAULT_SETTINGS.copy()
            user_settings[user_id]['position_size'] = size
            
            await message.answer(
                f"‚úÖ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {size}%",
                reply_markup=back_to_menu_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 100%",
                reply_markup=back_to_menu_keyboard()
            )
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
            reply_markup=back_to_menu_keyboard()
        )
    await state.clear()

@dp.message(SettingsStates.setting_sl)
async def handle_sl(message: types.Message, state: FSMContext):
    try:
        sl = float(message.text)
        if sl > 0:
            user_id = message.from_user.id
            if user_id not in user_settings:
                user_settings[user_id] = DEFAULT_SETTINGS.copy()
            user_settings[user_id]['sl'] = sl
            
            await message.answer(
                f"‚úÖ –°—Ç–æ–ø-–ª–æ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {sl}%",
                reply_markup=back_to_menu_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –°—Ç–æ–ø-–ª–æ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º",
                reply_markup=back_to_menu_keyboard()
            )
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
            reply_markup=back_to_menu_keyboard()
        )
    await state.clear()

@dp.message(SettingsStates.setting_tp)
async def handle_tp(message: types.Message, state: FSMContext):
    try:
        tp_levels = parse_tp_input(message.text)
        
        user_id = message.from_user.id
        if user_id not in user_settings:
            user_settings[user_id] = DEFAULT_SETTINGS.copy()
        user_settings[user_id]['tp_levels'] = tp_levels
        
        total_volume = sum(tp['volume_percent'] for tp in tp_levels)
        
        await message.answer(
            f"‚úÖ –£—Ä–æ–≤–Ω–∏ TP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:\n{format_tp_levels(tp_levels)}\n\n"
            f"üìä –û–±—â–∏–π –æ–±—ä—ë–º: {total_volume}%",
            reply_markup=back_to_menu_keyboard()
        )
        
    except ValueError as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ TP:\n{str(e)}",
            reply_markup=back_to_menu_keyboard()
        )
    await state.clear()

@dp.message(SettingsStates.setting_breakeven)
async def handle_breakeven(message: types.Message, state: FSMContext):
    try:
        breakeven = float(message.text)
        if breakeven > 0:
            user_id = message.from_user.id
            if user_id not in user_settings:
                user_settings[user_id] = DEFAULT_SETTINGS.copy()
            user_settings[user_id]['breakeven_percent'] = breakeven
            
            await message.answer(
                f"‚úÖ –ë–µ–∑—É–±—ã—Ç–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {breakeven}%",
                reply_markup=back_to_menu_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –±–µ–∑—É–±—ã—Ç–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º",
                reply_markup=back_to_menu_keyboard()
            )
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
            reply_markup=back_to_menu_keyboard()
        )
    await state.clear()

@dp.message(SettingsStates.setting_slippage)
async def handle_slippage(message: types.Message, state: FSMContext):
    try:
        slippage = float(message.text.strip())
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ª–∏–ø–ø–µ–¥–∂–∞
        if slippage <= 0:
            await message.answer(
                "‚ùå –°–ª–∏–ø–ø–µ–¥–∂ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: 5 (–¥–ª—è 5% —Å–ª–∏–ø–ø–µ–¥–∂–∞)",
                reply_markup=back_to_menu_keyboard()
            )
            await state.clear()
            return
        
        if slippage > 99:
            await message.answer(
                "‚ùå –°–ª–∏–ø–ø–µ–¥–∂ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 99%\n\n"
                "‚ö†Ô∏è –¢–∞–∫–æ–π –≤—ã—Å–æ–∫–∏–π —Å–ª–∏–ø–ø–µ–¥–∂ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –æ–≥—Ä–æ–º–Ω—ã–º –ø–æ—Ç–µ—Ä—è–º",
                reply_markup=back_to_menu_keyboard()
            )
            await state.clear()
            return
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        warning_text = ""
        if slippage < 0.5:
            warning_text = "\n‚ö†Ô∏è –ù–∏–∑–∫–∏–π —Å–ª–∏–ø–ø–µ–¥–∂ - —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ –ø–µ—Ä–∏–æ–¥—ã –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
        elif slippage > 20:
            warning_text = "\n‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —Å–ª–∏–ø–ø–µ–¥–∂ - –≤–æ–∑–º–æ–∂–Ω—ã –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ –ø—Ä–∏ —Ç–æ—Ä–≥–æ–≤–ª–µ"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        user_id = message.from_user.id
        if user_id not in user_settings:
            user_settings[user_id] = DEFAULT_SETTINGS.copy()
        user_settings[user_id]['slippage_percent'] = slippage
        
        await message.answer(
            f"‚úÖ –°–ª–∏–ø–ø–µ–¥–∂ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {slippage}%{warning_text}",
            reply_markup=back_to_menu_keyboard()
        )
        
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ\n\n"
            "üí° –ü—Ä–∏–º–µ—Ä—ã: 5, 10, 15.5",
            reply_markup=back_to_menu_keyboard()
        )
    
    await state.clear()

async def main():
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∞–∫—Ç–∏–≤–Ω—ã–º whitelist")
    try:
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())

import asyncio
import logging
from datetime import datetime
from typing import Dict, List, Optional
from aiogram import Bot
from config import BOT_TOKEN

logger = logging.getLogger(__name__)

class NotificationManager:
    def __init__(self, bot_token: str = BOT_TOKEN):
        self.bot = Bot(token=bot_token)
        self.notification_settings = {}  # user_id -> settings
        
    def set_user_notifications(self, user_id: int, settings: dict):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.notification_settings[user_id] = settings
    
    def get_user_settings(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return self.notification_settings.get(user_id, {
            'position_open': True,
            'position_close': True,
            'stop_loss': True,
            'take_profit': True,
            'breakeven': True,
            'daily_summary': False,
            'errors': True
        })
    
    async def send_notification(self, user_id: int, message: str, notification_type: str = 'info'):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            settings = self.get_user_settings(user_id)
            if not settings.get(notification_type, True):
                return
            
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='HTML'
            )
            logger.debug(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {notification_type}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    async def notify_position_opened(self, user_id: int, position: dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏"""
        contract = position['contract_address']
        amount = position['invested_sol']
        price = position['entry_price']
        sl = position.get('sl', 0)
        tp_count = len(position.get('tp_levels', []))
        
        message = f"""
üü¢ <b>–ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞</b>

üí∞ –ö–æ–Ω—Ç—Ä–∞–∫—Ç: <code>{contract[:8]}...{contract[-6:]}</code>
üíµ –†–∞–∑–º–µ—Ä: {amount:.4f} SOL
üìà –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {price:.8f}
üõë Stop Loss: {sl}%
üéØ Take Profit: {tp_count} —É—Ä–æ–≤–Ω–µ–π

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
        await self.send_notification(user_id, message, 'position_open')
    
    async def notify_position_closed(self, user_id: int, contract_address: str, 
                                   pnl_percent: float, pnl_sol: float, reason: str = "manual"):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏"""
        status_icon = "üü¢" if pnl_sol >= 0 else "üî¥"
        reason_text = {
            'manual': '–†—É—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ',
            'sl': 'Stop Loss',
            'tp': 'Take Profit',
            'panic': 'Panic Sell'
        }.get(reason, reason)
        
        message = f"""
{status_icon} <b>–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞</b>

üí∞ –ö–æ–Ω—Ç—Ä–∞–∫—Ç: <code>{contract_address[:8]}...{contract_address[-6:]}</code>
üìä P&L: {pnl_sol:+.4f} SOL ({pnl_percent:+.2f}%)
üîÑ –ü—Ä–∏—á–∏–Ω–∞: {reason_text}

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
        await self.send_notification(user_id, message, 'position_close')
    
    async def notify_stop_loss(self, user_id: int, contract_address: str, pnl_percent: float):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å"""
        message = f"""
üõë <b>STOP LOSS</b>

üí∞ –ö–æ–Ω—Ç—Ä–∞–∫—Ç: <code>{contract_address[:8]}...{contract_address[-6:]}</code>
üìâ –£–±—ã—Ç–æ–∫: {pnl_percent:.2f}%
üîÑ –ü–æ–∑–∏—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç–∞

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
        await self.send_notification(user_id, message, 'stop_loss')
    
    async def notify_take_profit(self, user_id: int, contract_address: str, 
                               tp_level: float, volume_percent: float, pnl_percent: float):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç"""
        message = f"""
üéØ <b>TAKE PROFIT</b>

üí∞ –ö–æ–Ω—Ç—Ä–∞–∫—Ç: <code>{contract_address[:8]}...{contract_address[-6:]}</code>
üìà –£—Ä–æ–≤–µ–Ω—å: {tp_level}x (+{(tp_level-1)*100:.0f}%)
üìä –ü—Ä–æ–¥–∞–Ω–æ: {volume_percent}% –ø–æ–∑–∏—Ü–∏–∏
üíπ –¢–µ–∫—É—â–∏–π P&L: +{pnl_percent:.2f}%

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
        await self.send_notification(user_id, message, 'take_profit')
    
    async def notify_breakeven(self, user_id: int, contract_address: str, pnl_percent: float):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –≤ –±–µ–∑—É–±—ã—Ç–æ–∫"""
        message = f"""
‚öñÔ∏è <b>BREAKEVEN</b>

üí∞ –ö–æ–Ω—Ç—Ä–∞–∫—Ç: <code>{contract_address[:8]}...{contract_address[-6:]}</code>
üìà –ü—Ä–∏–±—ã–ª—å: +{pnl_percent:.2f}%
üîí Stop Loss –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –±–µ–∑—É–±—ã—Ç–æ–∫

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
        await self.send_notification(user_id, message, 'breakeven')
    
    async def notify_error(self, user_id: int, error_message: str, context: str = ""):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        message = f"""
‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>

üîç –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}
üí• –û—à–∏–±–∫–∞: {error_message[:200]}

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
        await self.send_notification(user_id, message, 'errors')
    
    async def send_daily_summary(self, user_id: int, summary_text: str):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞"""
        message = f"""
üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç</b>

{summary_text}

üìÖ {datetime.now().strftime('%d.%m.%Y')}
"""
        await self.send_notification(user_id, message, 'daily_summary')
    
    def format_notification_settings(self, user_id: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        settings = self.get_user_settings(user_id)
        
        status_map = {True: "‚úÖ", False: "‚ùå"}
        
        text = "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>\n\n"
        text += f"{status_map[settings['position_open']]} –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π\n"
        text += f"{status_map[settings['position_close']]} –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π\n"
        text += f"{status_map[settings['stop_loss']]} Stop Loss\n"
        text += f"{status_map[settings['take_profit']]} Take Profit\n"
        text += f"{status_map[settings['breakeven']]} Breakeven\n"
        text += f"{status_map[settings['daily_summary']]} –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞\n"
        text += f"{status_map[settings['errors']]} –û—à–∏–±–∫–∏ —Å–∏—Å—Ç–µ–º—ã\n"
        
        return text

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
notification_manager = NotificationManager()
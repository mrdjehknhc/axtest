import logging
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, Update, Message, CallbackQuery
from typing import Callable, Dict, Any, Awaitable
from config import ALLOWED_USER_IDS

logger = logging.getLogger(__name__)

class WhitelistMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ whitelist –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    –ë–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫—Ä–æ–º–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
    """
    
    def __init__(self):
        self.allowed_users = set(ALLOWED_USER_IDS)
        logger.info(f"üîí Whitelist –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–æ–≤–∞–Ω –¥–ª—è {len(self.allowed_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {list(self.allowed_users)}")
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        
        user = None
        user_id = None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
        if isinstance(event, Update):
            if event.message:
                user = event.message.from_user
                user_id = user.id if user else None
            elif event.callback_query:
                user = event.callback_query.from_user
                user_id = user.id if user else None
        elif hasattr(event, 'from_user') and event.from_user:
            user = event.from_user
            user_id = user.id
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –±–ª–æ–∫–∏—Ä—É–µ–º
        if not user_id:
            logger.warning("üö´ –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º whitelist
        if user_id not in self.allowed_users:
            username = user.username if user and user.username else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            full_name = f"{user.first_name} {user.last_name or ''}".strip() if user else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            logger.warning(
                f"üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–ê–Ø –ü–û–ü–´–¢–ö–ê –î–û–°–¢–£–ü–ê:\n"
                f"   üë§ User ID: {user_id}\n"
                f"   üìù Username: @{username}\n"
                f"   üè∑Ô∏è –ò–º—è: {full_name}\n"
                f"   üìÖ –í—Ä–µ–º—è: {logger.handlers[0].formatter.formatTime() if logger.handlers else '–Ω/–¥'}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
            await self._send_access_denied_message(event, user_id, username)
            return  # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ handler
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
        if user:
            username = user.username if user.username else "–±–µ–∑ username"
            logger.debug(f"‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (@{username})")
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ handler –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        return await handler(event, data)
    
    async def _send_access_denied_message(self, event: TelegramObject, user_id: int, username: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ"""
        try:
            message_text = (
                "üö´ **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω**\n\n"
                "‚ö†Ô∏è –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
                f"üÜî –í–∞—à ID: `{user_id}`\n"
                f"üë§ Username: @{username}\n\n"
                "üìû –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞."
            )
            
            bot = None
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è
            if isinstance(event, Update):
                if event.message:
                    bot = event.message.bot
                    await bot.send_message(
                        chat_id=user_id,
                        text=message_text,
                        parse_mode="Markdown"
                    )
                elif event.callback_query:
                    bot = event.callback_query.bot
                    await bot.send_message(
                        chat_id=user_id,
                        text=message_text,
                        parse_mode="Markdown"
                    )
                    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "–∑–∞–≥—Ä—É–∑–∫—É"
                    await event.callback_query.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            elif hasattr(event, 'bot'):
                bot = event.bot
                await bot.send_message(
                    chat_id=user_id,
                    text=message_text,
                    parse_mode="Markdown"
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ: {e}")
    
    def add_user(self, user_id: int):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ whitelist (–ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ)"""
        self.allowed_users.add(user_id)
        logger.info(f"‚ûï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ whitelist")
    
    def remove_user(self, user_id: int):
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ whitelist (–ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ)"""
        if user_id in self.allowed_users:
            self.allowed_users.remove(user_id)
            logger.info(f"‚ûñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ whitelist")
    
    def is_allowed(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        return user_id in self.allowed_users
    
    def get_allowed_users(self) -> set:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return self.allowed_users.copy()
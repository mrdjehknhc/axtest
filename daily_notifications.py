import asyncio
import logging
from datetime import datetime, time
from reports import ReportsManager
from notifications import notification_manager
from storage import PositionStorage

logger = logging.getLogger(__name__)

class DailyReporter:
    def __init__(self):
        self.reports = ReportsManager()
        self.storage = PositionStorage()
        self.is_running = False
        self.task = None
    
    async def send_daily_reports(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
            positions_data = self.storage.load_positions()
            
            for user_id_str in positions_data.keys():
                user_id = int(user_id_str)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                settings = notification_manager.get_user_settings(user_id)
                if not settings.get('daily_summary', False):
                    continue
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å
                summary = self.reports.format_trade_summary(user_id, days=1)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
                active_positions = self.storage.get_positions(user_id)
                
                if active_positions:
                    summary += f"\n\nüîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(active_positions)}"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
                await notification_manager.send_daily_summary(user_id, summary)
                
                logger.info(f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(1)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")
    
    async def schedule_daily_reports(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        while self.is_running:
            now = datetime.now()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ 20:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
            target_time = time(20, 0)  # 20:00
            
            if now.time() >= target_time:
                # –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ 20:00, –∂–¥–µ–º –¥–æ –∑–∞–≤—Ç—Ä–∞
                tomorrow = now.replace(hour=20, minute=0, second=0, microsecond=0)
                if now.time() >= target_time:
                    tomorrow = tomorrow.replace(day=tomorrow.day + 1)
                
                wait_seconds = (tomorrow - now).total_seconds()
            else:
                # –ñ–¥–µ–º –¥–æ 20:00 —Å–µ–≥–æ–¥–Ω—è
                today_target = now.replace(hour=20, minute=0, second=0, microsecond=0)
                wait_seconds = (today_target - now).total_seconds()
            
            logger.info(f"üìÖ –°–ª–µ–¥—É—é—â–∏–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ {wait_seconds/3600:.1f} —á–∞—Å–æ–≤")
            
            # –ñ–¥–µ–º –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
            await asyncio.sleep(wait_seconds)
            
            if self.is_running:
                logger.info("üìä –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤...")
                await self.send_daily_reports()
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if self.is_running:
            return
        
        self.is_running = True
        self.task = asyncio.create_task(self.schedule_daily_reports())
        logger.info("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if not self.is_running:
            return
        
        self.is_running = False
        if self.task:
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        
        logger.info("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def send_test_report(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            summary = self.reports.format_trade_summary(user_id, days=1)
            active_positions = self.storage.get_positions(user_id)
            
            if active_positions:
                summary += f"\n\nüîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(active_positions)}"
            
            summary += "\n\nüß™ –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç"
            
            await notification_manager.send_daily_summary(user_id, summary)
            logger.info(f"üìä –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
daily_reporter = DailyReporter()
import asyncio
import logging
import signal
import sys
from concurrent.futures import ThreadPoolExecutor
from api_client import AxiomClient
from price_monitor import PriceMonitor
from daily_notifications import daily_reporter  # –î–û–ë–ê–í–õ–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢
from bot import main as bot_main

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
price_monitor = None
bot_task = None
monitor_task = None
daily_task = None  # –î–û–ë–ê–í–õ–ï–ù–ù–ê–Ø –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø
shutdown_event = None

async def shutdown_handler():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    global price_monitor, bot_task, monitor_task, daily_task, shutdown_event
    
    logger.info("üîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if shutdown_event:
        shutdown_event.set()
    
    # –î–û–ë–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê:
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
    logger.info("üìÖ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏...")
    await daily_reporter.stop()
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω
    if price_monitor:
        logger.info("üìä –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω...")
        await price_monitor.stop()
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if monitor_task:
        monitor_task.cancel()
        try:
            await monitor_task
        except asyncio.CancelledError:
            logger.info("üìä –ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    # –î–û–ë–ê–í–õ–ï–ù–ù–ê–Ø –°–ï–ö–¶–ò–Ø:
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
    if daily_task:
        daily_task.cancel()
        try:
            await daily_task
        except asyncio.CancelledError:
            logger.info("üìÖ –ó–∞–¥–∞—á–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
    if bot_task:
        logger.info("ü§ñ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞...")
        bot_task.cancel()
        try:
            await bot_task
        except asyncio.CancelledError:
            logger.info("ü§ñ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ SIGINT –∏ SIGTERM"""
    logger.info(f"‚ö° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}")
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    try:
        loop = asyncio.get_event_loop()
        if loop.is_running():
            loop.create_task(shutdown_handler())
        else:
            loop.run_until_complete(shutdown_handler())
    except RuntimeError:
        # –ï—Å–ª–∏ event loop –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(shutdown_handler())
    finally:
        sys.exit(0)

async def run_price_monitoring(price_monitor):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ—Ä—É—Ç–∏–Ω–µ"""
    try:
        await price_monitor.start()
        logger.info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
        # –ñ–¥–µ–º –ø–æ–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç
        while price_monitor.is_running:
            await asyncio.sleep(1)
            
    except asyncio.CancelledError:
        logger.info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω")
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Ü–µ–Ω: {e}")
        raise

async def main():
    global price_monitor, bot_task, monitor_task, shutdown_event
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ Axiom Trade v2.0 —Å Whitelist")
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    shutdown_event = asyncio.Event()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—ã
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Axiom Trade...")
        axiom_client = AxiomClient()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Axiom API
        if not axiom_client.is_authenticated():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å Axiom Trade API")
            logger.error("üîë –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω—ã AXIOM_ACCESS_TOKEN –∏ AXIOM_REFRESH_TOKEN –≤ config.py")
            return
        
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Axiom Trade API —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
        try:
            account_info = axiom_client.get_account_info()
            balance = account_info.get('balance', 0)
            logger.info(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å SOL: {balance:.6f}")
            logger.info(f"üè¶ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {axiom_client.wallet_address[:8]}...{axiom_client.wallet_address[-6:]}")
            
            if balance < 0.001:
                logger.warning("‚ö†Ô∏è –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ: {e}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω
        logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω...")
        price_monitor = PriceMonitor(axiom_client, check_interval=30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        
        # –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –°–¢–†–û–ö–ò:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
        logger.info("üìÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        logger.info("üéØ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã...")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        tasks = []
        
        # –ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω
        monitor_task = asyncio.create_task(
            run_price_monitoring(price_monitor),
            name="price_monitor"
        )
        tasks.append(monitor_task)
        
        # –ó–∞–¥–∞—á–∞ Telegram –±–æ—Ç–∞
        bot_task = asyncio.create_task(
            bot_main(),
            name="telegram_bot"
        )
        tasks.append(bot_task)
        
        logger.info("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        logger.info("üì± Telegram –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        logger.info("üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π –∞–∫—Ç–∏–≤–µ–Ω")
        logger.info("üõ°Ô∏è –°–∏—Å—Ç–µ–º—ã Stop Loss, Take Profit –∏ Breakeven –≥–æ—Ç–æ–≤—ã")
        logger.info("üîí Whitelist —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        logger.info("üìà –°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∞")  # –î–û–ë–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê
        logger.info("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")  # –î–û–ë–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê
        logger.info("\n" + "="*60)
        logger.info("ü§ñ –¢–û–†–ì–û–í–´–ô –ë–û–¢ AXIOM TRADE –ó–ê–ü–£–©–ï–ù")
        logger.info("üîí –†–ï–ñ–ò–ú –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: WHITELIST –ê–ö–¢–ò–í–ò–†–û–í–ê–ù")
        logger.info("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
        logger.info("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤")
        logger.info("   ‚Ä¢ Stop Loss (–∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∞ –ø—Ä–∏ —É–±—ã—Ç–∫–µ)")
        logger.info("   ‚Ä¢ Take Profit (—á–∞—Å—Ç–∏—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ –ø—Ä–∏ –ø—Ä–∏–±—ã–ª–∏)")
        logger.info("   ‚Ä¢ Breakeven (–ø–µ—Ä–µ–Ω–æ—Å SL –≤ –±–µ–∑—É–±—ã—Ç–æ–∫)")
        logger.info("   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π 24/7")
        logger.info("   ‚Ä¢ Panic Sell (—ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞)")
        logger.info("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")  # –î–û–ë–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê
        logger.info("   ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö")  # –î–û–ë–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê
        logger.info("   ‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–≤–æ–¥–∫–∏ —Ç–æ—Ä–≥–æ–≤")  # –î–û–ë–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê
        logger.info("   ‚Ä¢ Whitelist –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")
        logger.info("="*60 + "\n")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ whitelist
        from config import ALLOWED_USER_IDS
        logger.info(f"üîê –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {ALLOWED_USER_IDS}")
        logger.info("üí° –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–∏—Ç–µ ALLOWED_USER_IDS –≤ .env —Ñ–∞–π–ª–µ")
        
        logger.info(f"üìã –°–æ–∑–¥–∞–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        for i, task in enumerate(tasks):
            logger.info(f"   {i+1}. {task.get_name()}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π –∏–∑ –∑–∞–¥–∞—á
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á...")
        done, pending = await asyncio.wait(
            tasks,
            return_when=asyncio.FIRST_COMPLETED
        )
        
        logger.warning(f"‚ö†Ô∏è –û–¥–Ω–∞ –∏–∑ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å! –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {len(done)}, –û–∂–∏–¥–∞—é—â–∏—Ö: {len(pending)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å
        for task in done:
            logger.warning(f"üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞: {task.get_name()}")
            if task.exception():
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {task.get_name()}: {task.exception()}")
        
        # –ï—Å–ª–∏ –æ–¥–Ω–∞ –∏–∑ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        for task in pending:
            logger.info(f"üõë –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É: {task.get_name()}")
            task.cancel()
            try:
                await task
            except asyncio.CancelledError:
                logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task.get_name()} –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á–∞—Ö
        for task in done:
            try:
                await task
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {task.get_name()}: {e}")
        
    except KeyboardInterrupt:
        logger.info("‚ö° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C)")
        await shutdown_handler()
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        await shutdown_handler()
        raise
    finally:
        logger.info("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞")

if __name__ == "__main__":
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        from config import BOT_TOKEN, AXIOM_ACCESS_TOKEN, AXIOM_REFRESH_TOKEN, WALLET_ADDRESS, PRIVATE_KEY, ALLOWED_USER_IDS
        
        if not BOT_TOKEN:
            print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_TOKEN")
            print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ BOT_TOKEN=your_bot_token")
            sys.exit(1)
            
        if not AXIOM_ACCESS_TOKEN or not AXIOM_REFRESH_TOKEN:
            print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã Axiom Trade")
            print("üìù –û–±–Ω–æ–≤–∏—Ç–µ AXIOM_ACCESS_TOKEN –∏ AXIOM_REFRESH_TOKEN –≤ config.py")
            sys.exit(1)
            
        if not WALLET_ADDRESS or not PRIVATE_KEY:
            print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞")
            print("üìù –î–æ–±–∞–≤—å—Ç–µ WALLET_ADDRESS –∏ PRIVATE_KEY –≤ —Ñ–∞–π–ª .env")
            sys.exit(1)
        
        if not ALLOWED_USER_IDS:
            print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω whitelist –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            print("üìù –î–æ–±–∞–≤—å—Ç–µ ALLOWED_USER_IDS –≤ —Ñ–∞–π–ª .env")
            print("üí° –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π User ID, –Ω–∞–ø–∏—à–∏—Ç–µ @userinfobot –≤ Telegram")
            sys.exit(1)
        
        print(f"üîê Whitelist –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {ALLOWED_USER_IDS}")
        print("üìà –°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")  # –î–û–ë–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        asyncio.run(main())
        
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üíÄ –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        sys.exit(1)
